private

from Standard.Base import all
import Standard.Base.Data.Vector.Builder
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

import project.Column.Column
import project.Conversions.Convertible_To_Columns.Convertible_To_Columns
import project.Conversions.Convertible_To_Rows.Convertible_To_Rows
import project.Errors.No_Such_Column
import project.Internal.Fan_Out
import project.Internal.Java_Exports
import project.Internal.Java_Problems
import project.Internal.Widget_Helpers
import project.Prefix_Name.Prefix_Name
import project.Table.Table

## PRIVATE
expand_column : Table -> Text | Integer -> (Vector Text) | Nothing -> Prefix_Name -> Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds
expand_column (table : Table) (column : Text | Integer) (fields : (Vector Text) | Nothing = Nothing) (prefix : Prefix_Name = Prefix_Name.Column_Name) =
    column_object = table.at column
    expanded = create_table_from_objects column_object.to_vector fields

    expanded.if_not_error <|
        output = Vector.build initial_capacity=table.column_count+expanded.column_count-1 output_builder->

            ## Resolve names
            resolved_prefix = case prefix of
                Prefix_Name.None -> ""
                Prefix_Name.Column_Name -> column_object.name+" "
                Prefix_Name.Custom value -> value
            default_name = case prefix of
                Prefix_Name.None -> "Value"
                Prefix_Name.Column_Name -> column_object.name
                Prefix_Name.Custom value -> value
            naming_strategy = table.column_naming_helper.create_unique_name_strategy
            naming_strategy.mark_used (table.column_names.filter (c->c!=column_object.name))
            new_names = naming_strategy.make_all_unique (expanded.column_names.map n-> if n=='Value' then default_name else resolved_prefix+n)
            new_columns = new_names.zip expanded.columns (n->c-> c.rename n)

            ## Create Merged Columns
            table.columns.each c->
                if c.name != column_object.name then output_builder.append c else
                    output_builder.append_vector_range new_columns

        Table.new output

## PRIVATE
   GROUP Standard.Base.Conversions
   Expand aggregate values in a column to separate rows.

   For each value in the specified column, if it is an aggregate (`Vector`,
   `Range`, etc.), expand it to multiple rows, duplicating the values in the
   other columns.

   Arguments:
   - column: The column to expand.
   - at_least_one_row: for an empty aggregate value, if `at_least_one_row` is
     true, a single row is output with `Nothing` for the aggregates column; if
     false, no row is output at all.

   The following aggregate values are supported:
   - `Array`
   - `Vector`
   - `List`
   - `Range`
   - `Date_Range`
   - `Pair

   Any other values are treated as non-aggregate values, and their rows are kept
   unchanged.

   In in-memory tables, it is permitted to mix values of different types.

   > Example
     Expand a column of integer `Vectors` to a column of `Integer`

     table = Table.new [["aaa", [1, 2]], ["bbb", [[30, 31], [40, 41]]]]
     # => Table.new [["aaa", [1, 1, 2, 2]], ["bbb", [30, 31, 40, 41]]]
expand_to_rows : Table -> Text | Integer -> Boolean -> Boolean -> Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds
expand_to_rows table column:(Text | Integer) at_least_one_row=False sequences_only=False = if column.is_a Integer then expand_to_rows table (table.at column).name at_least_one_row else
    row_expander : Any -> Vector
    row_expander value:Convertible_To_Rows =
        value
            . align_sequence_only sequences_only
            . to_vector

    column_names : Any -> Vector
    column_names value:Convertible_To_Rows =
        value
            . align_sequence_only sequences_only
            . columns
            . map name-> if name=="Value" then column else column+" "+name

    Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
        builder size = Java_Exports.make_inferred_builder size java_problem_aggregator
        Fan_Out.fan_out_to_rows table column row_expander column_names at_least_one_row column_builder=builder

create_table_from_objects (base_value : Convertible_To_Rows) (fields : Vector | Nothing) (treat_dictionary_as_sequence : Boolean = False) -> Table = if fields.is_nothing.not && fields.is_empty then Error.throw (Illegal_Argument.Error "The fields parameter cannot be empty.") else
    expand_sequences_only = treat_dictionary_as_sequence.not
    value = base_value.align_sequence_only expand_sequences_only
    len = value.length

    Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
        preset_fields = fields.is_nothing.not
        initial_dict = if preset_fields.not then Dictionary.empty else
            Dictionary.from_vector (fields.map field_name-> [field_name, Java_Exports.make_inferred_builder len java_problem_aggregator]) error_on_duplicates=False

        # This is used to ensure that field names in the resulting table are in the order they were encountered.
        discovered_field_names = Builder.new

        builder_dict = case preset_fields of
            # Just get the queried keys from each object.
            True ->
                0.up_to len . each idx->
                    v = (value.getter idx).to Convertible_To_Columns
                    initial_dict.each_with_key field_name-> builder->
                        builder.append (v.getter field_name)

                initial_dict

            # In this mode we are discovering the key set as we go.
            False ->
                0.up_to len . fold initial_dict current_dict-> idx->
                    v = (value.getter idx).to Convertible_To_Columns
                    v.field_names.fold current_dict inner_current_dict-> f->
                        existing_builder = inner_current_dict.get f Nothing
                        builder = existing_builder.if_nothing <|
                            discovered_field_names.append f
                            Java_Exports.make_inferred_builder len java_problem_aggregator
                        _fill_builder builder idx
                        builder.append (v.getter f)
                        if existing_builder.is_nothing.not then inner_current_dict else
                            inner_current_dict.insert f builder

        # Seal all builders and create columns
        column_dict = builder_dict.map_with_key name-> builder->
            _fill_builder builder len
            Column.from_storage name builder.seal

        column_dict.if_not_error <|
            # Create a vector of columns, preserving the original order if it was specified.
            columns = case preset_fields of
                True  -> fields.distinct.map column_dict.get
                False ->
                    if discovered_field_names.is_empty then Error.throw (Illegal_Argument.Error "Unable to generate column names as all inputs had no fields.") else
                        discovered_field_names.to_vector.map column_dict.get
            Table.new columns

private _fill_builder builder size:Integer =
    to_fill = size - builder.getCurrentSize
    if to_fill > 0 then builder.appendNulls to_fill else
        if to_fill < 0 then Panic.throw (Illegal_State.Error "Internal error: builder overfilled ("+builder.getCurrentSize.to_text+").")
