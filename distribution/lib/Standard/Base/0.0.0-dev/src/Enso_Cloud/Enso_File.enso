import project.Any.Any
import project.Data.Color.Color
import project.Data.Json.JS_Object
import project.Data.Ordering.Vector_Lexicographic_Order
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Vector.Vector
import project.Enso_Cloud.Data_Link.Data_Link
import project.Enso_Cloud.Data_Link.Data_Link_From_File
import project.Enso_Cloud.Data_Link_Helpers
import project.Enso_Cloud.Enso_User.Enso_User
import project.Enso_Cloud.Errors.Enso_Cloud_Error
import project.Enso_Cloud.Internal.Enso_File_Write_Strategy
import project.Enso_Cloud.Internal.Enso_Path.Enso_Path
import project.Enso_Cloud.Internal.Existing_Enso_Asset.Asset_Cache
import project.Enso_Cloud.Internal.Existing_Enso_Asset.Existing_Enso_Asset
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Time_Error.Time_Error
import project.Errors.Unimplemented.Unimplemented
import project.Internal.Path_Helpers
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime
import project.Runtime.Context
import project.System.Environment
import project.System.File.Data_Link_Access.Data_Link_Access
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File.Generic.File_Like.File_Like
import project.System.File.Generic.Writable_File.Writable_File
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Input_Stream.Input_Stream
import project.System.Output_Stream.Output_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Data_Link_Helpers import data_link_extension
from project.Enso_Cloud.Internal.Enso_File_Helpers import all
from project.Enso_Cloud.Public_Utils import get_required_field
from project.System.File import find_extension_from_name
from project.System.File_Format import Auto_Detect, Bytes, File_Format, Plain_Text_Format
from project.System.File.Generic.File_Write_Strategy import generic_copy

type Enso_File
    ## ICON data_input
       Resolves an `enso://` path and returns the corresponding `Enso_File`
       instance.

       Arguments:
       - path: The `enso://` path to a file or directory.
    new : Text -> Enso_File ! Not_Found
    new (path : Text) =
        resolved_path = Enso_Path.parse path
        # Traverse the path to possibly pick up any data links.
        resolved_path.path_segments.fold Enso_File.root .resolve_single_part

    ## PRIVATE
    private Value (enso_path : Enso_Path)

    ## ICON folder
       Represents the current user's home directory.
    home : Enso_File
    home -> Enso_File =
        Enso_File.root / "Users" / Enso_User.current.name

    ## ICON folder
       Represents the root folder of the organization.

       ? Organization Root Directory

         The organization root directory cannot be directly written into.
         You should put your files and projects in a subdirectory dedicated to a
         given user or team in the `Users` or `Teams` subdirectories within it.
    root : Enso_File
    root = Enso_File.Value Enso_Path.root

    ## ICON folder
       Represents the current working directory.

       If the workflow is running on the Cloud, this will be the directory
       containing the current project.

       If the workflow is running locally, this will default to the root
       directory.
    current_working_directory : Enso_File
    current_working_directory =
        Enso_File.cloud_project_parent_directory . if_nothing Enso_File.home

    ## PRIVATE
       The parent directory containing the currently open project if in the
       Cloud, or `Nothing` if running locally.
    cloud_project_parent_directory : Enso_File | Nothing
    cloud_project_parent_directory =
        path = Environment.get "ENSO_CLOUD_PROJECT_DIRECTORY_PATH"
        path.if_not_nothing <| Enso_File.new path

    ## PRIVATE
    asset_type self -> Enso_Asset_Type =
        # TODO maybe we can short circuit if it ends with `.datalink` or `.secret`?
        Existing_Enso_Asset.get_asset_reference_for self . asset_type

    ## GROUP Metadata
       ICON metadata
       Checks if the folder or file exists.

       ? Data Links
         If the file is a data link, this checks if the data link itself exists. 
         It does not tell anything about existence of the data link target.       
    exists : Boolean
    exists self =
        r = Existing_Enso_Asset.get_asset_reference_for self . if_not_error True
        r.catch File_Error error-> case error of
            File_Error.Not_Found _ -> False
            _ -> r

    ## GROUP Metadata
       ICON metadata
       Gets the size of a file in bytes.

       ? Data Links
         If the file is a data link that points to a file, the size of the 
         target file will be returned.
    size : Integer
    size self -> Integer = if self.is_data_link then Data_Link_Helpers.interpret_data_link_target_as_file self . size else
        asset = Existing_Enso_Asset.get_asset_reference_for self
        if asset.asset_type != Enso_Asset_Type.File then Error.throw (Illegal_Argument.Error "`size` can only be queried for files.") else
            metadata = asset.get_file_description |> get_required_field "metadata"
            get_required_field "size" metadata expected_type=Integer

    ## GROUP Metadata
       ICON metadata
       Gets the creation time of a file.

       ? Data Links
         If the file is a data link, this returns the creation time of the data 
         link.
    creation_time : Date_Time
    creation_time self -> Date_Time =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        if asset.asset_type != Enso_Asset_Type.File then Error.throw (Illegal_Argument.Error "`creation_time` can only be queried for files.") else
            metadata = asset.get_file_description |> get_required_field "metadata"
            Date_Time.parse (get_required_field "createdAt" metadata expected_type=Text) Date_Time_Formatter.iso_offset_date_time
                . catch Time_Error error-> Error.throw (Enso_Cloud_Error.Invalid_Response_Payload error)

    ## GROUP Metadata
       ICON metadata
       Gets the last modified time of a file.

       ? Data Links
         If the file is a data link, this returns the modification time of the 
         data link.
    last_modified_time : Date_Time
    last_modified_time self -> Date_Time =
        asset = Existing_Enso_Asset.get_asset_reference_for self want_metadata=True
        asset.metadata.modified_at

    ## GROUP Metadata
       ICON metadata
       Gets the description associated with the file in Enso Cloud.

       By default, the description is empty. It can be set in the Dashboard, or
       using the `set_description` method.
    description : Text
    description self -> Text =
        asset = Existing_Enso_Asset.get_asset_reference_for self want_metadata=True
        asset.metadata.description.if_nothing ""

    ## GROUP Metadata
       ICON data_output
       Sets the description associated with the file in Enso Cloud.

       Arguments:
       - description: The new description to set.

       Returns:
       - The file on which it was called.
    set_description : Text -> Enso_File
    set_description self (description : Text) -> Enso_File =
        Context.Output.if_enabled disabled_message="Cannot set a description when writing is disabled. Press the Write button ▶ to perform the operation." panic=False <|
            update_asset_description self description . if_not_error self

    ## GROUP Metadata
       ICON metadata
       Gets the labels associated with the file in Enso Cloud.
    labels : Vector Text
    labels self -> Vector Text =
        asset = Existing_Enso_Asset.get_asset_reference_for self want_metadata=True
        asset.metadata.labels

    ## GROUP Metadata
       ICON data_output
       Adds a label to the file in Enso Cloud.

       If the label with the given name did not exist before, it is created with
       a random color associated with it. If you want to set a specific color,
       use `Enso_File.create_label` before calling this method.

       Arguments:
       - label: The name of the label to add to the file.

       Returns:
       - The file on which it was called.

       ? Race Conditions

         Adding labels is not atomic. If two processes are modifying labels of
         the same asset at the same time, some changes may be lost.
    add_label : Text -> Enso_File
    add_label self (label : Text) -> Enso_File =
        labels = self.labels
        if labels.contains label then self else
            Context.Output.if_enabled disabled_message="Cannot add a label when writing is disabled. Press the Write button ▶ to perform the operation." panic=False <|
                create_tags_if_not_exist [label] . if_not_error <|
                    new_labels = labels+[label]
                    update_asset_labels self new_labels . if_not_error self

    ## GROUP Metadata
       ICON data_output
       Removes a label from the file in Enso Cloud.

       Arguments:
       - label: The name of the label to remove from the file.

       Returns:
       - A boolean value indicating if the file had the label before the operation.

       ? Race Conditions

         Removing labels is not atomic. If two processes are modifying labels of
         the same asset at the same time, some changes may be lost.
    remove_label : Text -> Boolean
    remove_label self (label : Text) -> Boolean =
        labels = self.labels
        if labels.contains label . not then False else
            Context.Output.if_enabled disabled_message="Cannot remove a label when writing is disabled. Press the Write button ▶ to perform the operation." panic=False <|
                new_labels = labels.filter l-> l != label
                update_asset_labels self new_labels . if_not_error True

    ## GROUP Metadata
       ICON data_output
       Sets the set of labels associated with the file in Enso Cloud.
       Any other labels than the ones provided are removed from the file.

       If any of the provided labels did not exist before, it is created with
       a random color associated with it. If you want to set a specific color,
       use `Enso_File.create_label` before calling this method.

       Arguments:
       - labels: The new set of labels to associate with the file.

       Returns:
       - The file on which it was called.
    set_labels : Vector Text -> Enso_File
    set_labels self (labels : Vector Text) -> Enso_File =
        Context.Output.if_enabled disabled_message="Cannot update labels when writing is disabled. Press the Write button ▶ to perform the operation." panic=False <|
            create_tags_if_not_exist labels . if_not_error <|
                update_asset_labels self labels . if_not_error self

    ## GROUP Metadata
       ICON data_output
       Creates a new label with the given name and color.

       Arguments:
       - name: The name of the label to create.
       - color: The color of the label to create.
    create_label : Text -> Color -> Nothing
    create_label (name : Text) (color : Color) -> Nothing =
        # TODO once cloud also checks for tag existance, if the Write context is enabled we could avoid this check as cloud will do it anyway - then we'll have only one request instead of 2 each time
        # Cloud ticket: https://github.com/enso-org/cloud-v2/issues/1544
        if does_tag_exist name then Error.throw (Illegal_Argument.Error "A label with name "+name+" already exists.") else
            Context.Output.if_enabled disabled_message="Cannot create a label when writing is disabled. Press the Write button ▶ to perform the operation." panic=False <|
                create_tag name color . if_not_error Nothing

    ## GROUP Metadata
       ICON metadata
       Checks if this is a folder.

       ? Data Links
         If the file is a data link, this checks whether the target of the data 
         link is a directory.
    is_directory : Boolean
    is_directory self = Data_Link_Helpers.is_directory self <|
        Existing_Enso_Asset.get_asset_reference_for self . asset_type == Enso_Asset_Type.Directory

    ## GROUP Metadata
       ICON metadata
       Checks if this is a regular file.
       
       ? Data Links
         If the file is a data link, this checks whether the target of the data 
         link is a regular file.
    is_regular_file : Boolean
    is_regular_file self = Data_Link_Helpers.is_regular_file self <|
        Existing_Enso_Asset.get_asset_reference_for self . asset_type == Enso_Asset_Type.File

    ## PRIVATE
    is_data_link self -> Boolean =
        ## Checking the `asset_type` requires actually fetching the metadata from the cloud.
           To avoid performing requests for every part of a path that we are resolving,
           we rely on the assumption that every data link has a name ending with the `.datalink` extension.
           Thus we perform the costly check only if we find a good potential candidate for the data link.
        may_be_data_link = Data_Link.is_data_link_name self.name
        if may_be_data_link.not then False else
            # We catch `File_Error` which means that the asset just does not exist.
            asset_type = self.asset_type.catch File_Error _->Nothing
            ## If the file does not exist, we treat it as a 'possible data link' to allow creating new data links with
               that `Enso_File` as the data link location. Thus we return True.
               If the asset already exists, we rely on its type.
            if asset_type.is_nothing then True else
                self.asset_type == Enso_Asset_Type.Data_Link

    ## GROUP Metadata
       ICON folder
       Finds the parent Enso_File for this file.
    parent : Enso_File | Nothing
    parent self =
        if self.enso_path.is_root then Nothing else
            Enso_File.Value self.enso_path.parent

    ## GROUP Metadata
       ICON metadata
       Returns the path of this file.
    path self -> Text = self.enso_path.to_text

    ## GROUP Metadata
       ICON metadata
       Checks if `self` is a descendant of `other`.
    is_descendant_of self (other : Enso_File) -> Boolean =
        self.enso_path.is_descendant_of other.enso_path

    ## PRIVATE
       Convert to a display representation of this S3_File.
    to_display_text : Text
    to_display_text self = "Enso_File {" + self.path + "}"

    ## PRIVATE
       ADVANCED
       Creates a new output stream for this file and runs the specified action
       on it.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the output stream and returns some
         value. The value is returned from this method.
    with_output_stream : Vector File_Access -> (Output_Stream -> Any ! File_Error) -> Any ! File_Error
    with_output_stream self (open_options : Vector) action =
        Context.Output.if_enabled disabled_message="As writing is disabled, cannot write to a file. Press the Write button ▶ to perform the operation." panic=False <|
            is_data_link = self.is_data_link
            open_as_data_link = (open_options.contains Data_Link_Access.No_Follow . not) && is_data_link
            if open_as_data_link then Data_Link_Helpers.write_data_link_as_stream self open_options action else
                if open_options.contains File_Access.Append then Unimplemented.throw "Enso_File currently does not support appending to a file. Instead you may read it, modify and then write the new contents." else
                    File_Access.ensure_only_allowed_options "with_output_stream" [File_Access.Write, File_Access.Create_New, File_Access.Truncate_Existing, File_Access.Create, Data_Link_Access.No_Follow] open_options <|
                        allow_existing = open_options.contains File_Access.Create_New . not
                        case is_data_link of
                            False ->
                                tmp_file = File.create_temporary_file "enso-cloud-write-tmp"
                                Panic.with_finalizer tmp_file.delete <|
                                    perform_upload self allow_existing <|
                                        result = tmp_file.with_output_stream [File_Access.Write] action
                                        result.if_not_error [tmp_file, result]
                            True -> create_datalink_from_stream_action self allow_existing action

    ## PRIVATE
       ADVANCED
       Creates a new input stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the input stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).
    with_input_stream : Vector File_Access -> (Input_Stream -> Any ! File_Error) -> Any ! File_Error | Illegal_Argument
    with_input_stream self (open_options : Vector) action =
        open_as_data_link = (open_options.contains Data_Link_Access.No_Follow . not) && self.is_data_link
        if open_as_data_link then Data_Link_Helpers.read_data_link_as_stream self open_options action else
            File_Access.ensure_only_allowed_options "with_input_stream" [File_Access.Read, Data_Link_Access.No_Follow] open_options <|
                asset = Existing_Enso_Asset.get_asset_reference_for self
                response = case asset.asset_type of
                    Enso_Asset_Type.File ->
                        presigned_url = asset.get_file_description want_presinged_url=True |> get_required_field "url" expected_type=Text
                        # We are skipping the cache, because pre-signed URLs are unlikely to repeat, so caching them would be pointless.
                        # Caching of cloud files tracked by https://github.com/enso-org/enso/issues/11439
                        HTTP.fetch presigned_url HTTP_Method.Get cache_policy=..No_Cache
                    Enso_Asset_Type.Data_Link ->
                        Runtime.assert (open_options.contains Data_Link_Access.No_Follow)
                        Utils.http_request HTTP_Method.Get asset.internal_uri
                    _ ->
                        Error.throw (Illegal_Argument.Error "Only files can be opened as a stream.")
                response.if_not_error <| response.body.with_stream action

    ## ALIAS load, open, import
       GROUP Input
       ICON data_input
       Read a file using the specified file format

       Arguments:
       - format: A `File_Format` object used to read file into memory.
         If `Auto_Detect` is specified; the provided file determines the specific
         type and configures it appropriately. If there is no matching type then
         a `File_Error.Unsupported_Type` error is returned.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @format File_Format.default_widget
    read : File_Format -> Problem_Behavior -> Any ! Illegal_Argument | File_Error
    read self format=Auto_Detect (on_problems : Problem_Behavior = ..Report_Warning) =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        case asset.asset_type of
            Enso_Asset_Type.Project -> Error.throw (Illegal_Argument.Error "Projects cannot be read within Enso code. Open using the IDE.")
            Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be read directly.")
            Enso_Asset_Type.Data_Link ->
                datalink = Data_Link_Helpers.interpret_existing_asset_as_data_link asset
                datalink.read format on_problems
            Enso_Asset_Type.Directory -> Error.throw (Illegal_Argument.Error "Cannot `read` a directory, use `list`.")
            Enso_Asset_Type.File ->
                read_with_format effective_format =
                    metadata = File_Format_Metadata.from self
                    self.with_input_stream [File_Access.Read] (stream-> effective_format.read_stream stream metadata)

                if format != Auto_Detect then read_with_format (File_Format.resolve format) else
                    real_format = Auto_Detect.get_reading_format self
                    if real_format == Nothing then Error.throw (File_Error.Unsupported_Type self) else
                        read_with_format real_format

    ## ALIAS load bytes, open bytes
       ICON data_input
       Reads all bytes in this file into a byte vector.
    read_bytes : Vector ! File_Error
    read_bytes self =
        self.read Bytes

    ## ALIAS load text, open text
       ICON data_input
       Reads the whole file into a `Text`, with specified encoding.

       Arguments:
       - encoding: The text encoding to decode the file with. Defaults to UTF-8.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @encoding Encoding.default_widget
    read_text : Encoding -> Problem_Behavior -> Text ! File_Error
    read_text self (encoding : Encoding = Encoding.default) (on_problems : Problem_Behavior = ..Report_Warning) =
        self.read (Plain_Text_Format.Plain_Text encoding) on_problems

    ## GROUP Metadata
       ICON metadata
       Returns the name of this file.
    name self -> Text =
        if self.enso_path.path_segments.is_empty then "" else
            self.enso_path.path_segments.last

    ## GROUP Metadata
       ICON metadata
       Returns the extension of the file.
    extension self -> Text =
        find_extension_from_name self.name

    ## GROUP Input
       ICON data_input
       Lists assets contained in this directory.
    list : Text -> Boolean -> Vector Enso_File
    list self (name_filter:Text="") recursive:Boolean=False =
        if self.is_data_link then Data_Link_Helpers.interpret_data_link_target_as_file self . list name_filter=name_filter recursive=recursive else
            if name_filter != "" then Error.throw (Illegal_Argument.Error "Filtering by name is currently not supported in Enso_File.") else
                if recursive then Error.throw (Illegal_Argument.Error "Recursive listing is currently not supported in Enso_File.") else
                    if self.is_directory.not then Error.throw (Illegal_Argument.Error "Cannot `list` a non-directory.") else
                        # Remove secrets from the list - they are handled separately in `Enso_Secret.list`.
                        assets = list_assets self . filter f-> f.asset_type != Enso_Asset_Type.Secret
                        results = assets.map asset->
                            file = Enso_File.Value (self.enso_path.resolve asset.name)
                            Asset_Cache.update file asset
                            file
                        results.sort on=.path

    ## GROUP Output
       ICON folder_add
       Creates the directory represented by this file if it did not exist.

       It also creates parent directories if they did not exist.
    create_directory : Enso_File
    create_directory self =
        if self.exists then self else
            create_directory_with_parents self . if_not_error self

    ## UNSTABLE
       GROUP Output
       ICON trash
       Deletes the file or directory.

       Arguments:
       - recursive: If the target is a non-empty directory, it will only be
         removed if this is set to `True`. Defaults to `False`, meaning that the
         operation will fail if the directory is not empty. This option has no
         effect for files or data links.

       ? Data Links
         If the file is a data link, this will delete the link itself, not
         affecting its target.
    delete : Boolean -> Nothing
    delete self (recursive : Boolean = False) = if self.enso_path.is_root then Error.throw (Illegal_Argument.Error "The root directory cannot be deleted.") else
        asset = Existing_Enso_Asset.get_asset_reference_for self
        # The cloud defaults to recursively removing the whole directory, so we need a check on our side.
        # The `self.list` is last of the `&&` conditions because it is the most expensive one.
        # TODO ideally we should have a parameter `recursive` that would move this check to be local
        is_directory = asset.asset_type == Enso_Asset_Type.Directory
        if is_directory && recursive.not && self.list.is_empty.not then Error.throw (File_Error.Directory_Not_Empty self) else
            uri = URI.from asset.asset_uri . add_query_argument "force" "true"
            response = Utils.http_request HTTP_Method.Delete uri
            if is_directory then Asset_Cache.invalidate_subtree self else Asset_Cache.invalidate self
            response.if_not_error Nothing

    ## ICON data_output
       Deletes the file if it had existed.

       Arguments:
       - recursive: If the target is a non-empty directory, it will only be
         removed if this is set to `True`. Defaults to `False`, meaning that the
         operation will fail if the directory is not empty. This option has no
         effect for files or data links.
    delete_if_exists : Boolean -> Nothing
    delete_if_exists self (recursive : Boolean = False) =
        r = self.delete recursive
        r.catch File_Error err-> case err of
            File_Error.Not_Found _ -> Nothing
            _ -> r

    ## ICON data_output
       Copies the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    copy_to : File_Like -> Boolean -> Any ! File_Error
    copy_to self (destination : File_Like) (replace_existing : Boolean = False) = Data_Link_Helpers.disallow_links_in_copy self destination <|
        generic_copy self destination replace_existing

    ## ICON data_output
       Moves the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    move_to : File_Like -> Boolean -> Any ! File_Error
    move_to self (destination : File_Like) (replace_existing : Boolean = False) = Data_Link_Helpers.disallow_links_in_move self destination <|
        # TODO we could have a fast path if Cloud will support renaming files
        r = self.copy_to destination replace_existing
        r.if_not_error <|
            # If source and destination are the same, we do not want to delete the file
            if destination.underlying == self then r else
                self.delete . if_not_error r

    ## GROUP Operators
       ICON folder
       Resolves a file or directory within this directory.
    / : Text -> Enso_File ! Not_Found
    / self (name : Text) -> Enso_File | Any ! Not_Found =
        Path_Helpers.resolve_many_parts self name

    ## PRIVATE
       An internal helper method that resolves a single part (subpath) of a path,
       used by `Path_Resolver`.
    resolve_single_part self part:Text -> Any =
        if self.is_data_link then Data_Link_Helpers.interpret_data_link_target_as_file self . resolve_single_part part else
            Enso_File.Value (self.enso_path.resolve part)

    ## PRIVATE
       Returns the text representation of the file descriptor.
    to_text : Text
    to_text self -> Text =
        "Enso_File "+self.path

    ## PRIVATE
       Converts the file descriptor to a JSON object.
    to_js_object : JS_Object
    to_js_object self =
        JS_Object.from_pairs [["type", "Enso_File"], ["constructor", "new"], ["path", self.path.to_text]]

## PRIVATE
list_assets (parent : Enso_File) -> Vector Existing_Enso_Asset =
    Existing_Enso_Asset.get_asset_reference_for parent . list_directory

type Enso_Asset_Type
    ## Represents an Enso project.
    Project

    ## Represents an file.
    File

    ## Represents a folder.
    Directory

    ## Represents a secret.
    Secret

    ## Represents a connection to another data source.
    Data_Link

## PRIVATE
Enso_Asset_Type.from (that:Text) = case that of
    "project" -> Enso_Asset_Type.Project
    "file" -> Enso_Asset_Type.File
    "directory" -> Enso_Asset_Type.Directory
    "secret" -> Enso_Asset_Type.Secret
    "datalink" -> Enso_Asset_Type.Data_Link
    _ -> Error.throw (Illegal_Argument.Error "Invalid asset type: "+that.pretty+".")

## PRIVATE
File_Format_Metadata.from (that:Enso_File) =
    asset_type = that.asset_type.catch File_Error _->Nothing
    if asset_type == Enso_Asset_Type.Data_Link then File_Format_Metadata.Value path=that.path name=that.name content_type=Data_Link_Helpers.data_link_content_type else
        File_Format_Metadata.Value path=that.path name=that.name extension=that.extension

## PRIVATE
File_Like.from (that : Enso_File) = File_Like.Value that

## PRIVATE
Writable_File.from (that : Enso_File) = if that.is_data_link then Data_Link_Helpers.interpret_data_link_as_writable_file that else
    Writable_File.Value that Enso_File_Write_Strategy.instance

## PRIVATE
Data_Link_From_File.from (that : Enso_File) = Data_Link_From_File.Value that
