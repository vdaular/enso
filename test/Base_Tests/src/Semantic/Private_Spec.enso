
from Standard.Base import all
import Standard.Base.Errors.Common.Private_Access
from Standard.Test import all
from enso_dev.Helpers import Public_Type

polyglot java import org.enso.base_test_helpers.CallbackHelper

type My_Priv_Type
    private Cons data

private My_Priv_Type.ext_method self = self.data


add_specs spec_builder =
    pending_js_missing = if Polyglot.is_language_installed "js" then Nothing else
        "Can't run JavaScript tests, language `js` is not installed."

    spec_builder.group "Private constructors" group_builder->
        group_builder.specify "can get on hold of private constructor" <|
            Public_Type.cons . is_nothing . should_be_false

        group_builder.specify "cannot directly call private constructor" <|
            Test.expect_panic Private_Access <| Public_Type.cons 42

        # Optimally, we want `Priv_Type.Cons` expression to result in a compilation error.
        # All the references to private methods/constructors are theoretically resolvable
        # at compilation time. However, the current state of the static compiler does not
        # allow us to do that easily.
        # For more info, see https://github.com/enso-org/enso/issues/6729
        group_builder.specify "can get reference to private constructor, but cannot call it" <|
            cons_fn data = Public_Type.cons data
            Test.expect_panic Private_Access <| cons_fn 42

        group_builder.specify "can call private constructor via public factory method" <|
            obj = Public_Type.create 42
            obj.is_nothing . should_be_false

        group_builder.specify "cannot get private field" <|
            obj = Public_Type.create 42
            Test.expect_panic Private_Access <| obj.data

        group_builder.specify "can get private field via public accessor" <|
            obj = Public_Type.create 42
            obj.get_data . should_equal 42

        group_builder.specify "can get private field from JS" pending=pending_js_missing <|
            obj = Public_Type.create 42
            ret = js_access_field obj
            ret.should_equal 42

        group_builder.specify "can call private constructor via public factory method from JS" pending=pending_js_missing <|
            create_fn x = Public_Type.create x
            obj = js_create_obj create_fn
            obj.is_nothing . should_be_false

        group_builder.specify "can get private field via public accessor from JS" pending=pending_js_missing <|
            obj = Public_Type.create 42
            js_access_field_via_getter obj . should_equal 42

        group_builder.specify "cannot call private constructor from Java" <|
            cons_fn data = Public_Type.cons data
            Test.expect_panic Private_Access <| CallbackHelper.runCallbackInt cons_fn 42

        group_builder.specify "cannot call private constructor from a lambda method" <|
            Test.expect_panic Private_Access <|
                Public_Type.in_ctx <|
                    Public_Type.cons 42

        # Note that pattern matching on project-private constructor from a different project
        # is a compilation error. So we can only test it for the same project.
        group_builder.specify "can pattern match on private constructor from the same project" <|
            obj = My_Priv_Type.Cons 42
            res = case obj of
                My_Priv_Type.Cons x -> x
                _ -> 0
            res . should_equal 42


    spec_builder.group "Private methods" group_builder->
        group_builder.specify "can call private method in the same project" <|
            priv_method 1 . should_equal 1

        group_builder.specify "cannot call private method from different project" <|
            obj = Public_Type.create 42
            Test.expect_panic Private_Access <|
                obj.priv_method

        group_builder.specify "cannot call private static method from different project" <|
            obj = Public_Type.create 42
            Test.expect_panic Private_Access <|
                Public_Type.priv_method obj

        group_builder.specify "cannot call private method from a lambda method" <|
            obj = Public_Type.create 42
            Test.expect_panic Private_Access <|
                Public_Type.in_ctx <|
                    Public_Type.priv_method obj

        group_builder.specify "extension methods can be specified as private" <|
            obj = My_Priv_Type.Cons 42
            obj.ext_method . should_equal 42



foreign js js_access_field obj = """
    return obj.data;

foreign js js_access_field_via_getter obj = """
    return obj.get_data();


foreign js js_create_obj cons_fn = """
    return cons_fn(42);

private priv_method x = x

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter
