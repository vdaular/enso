from Standard.Base import all
import Standard.Base.Enso_Cloud.Data_Link.Data_Link
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Runtime.Context
import Standard.Base.Runtime.Ref.Ref

from Standard.Test import Problems
import Standard.Test.Test_Environment


polyglot java import java.security.KeyStore
polyglot java import javax.net.ssl.SSLContext
polyglot java import javax.net.ssl.TrustManagerFactory
polyglot java import org.enso.base.enso_cloud.CloudAPI

type Cloud_Tests_Setup
    Mock api_url:URI credentials_location:File
    Cloud
    None

    with_prepared_environment self ~action = case self of
        Cloud_Tests_Setup.Mock _ _ ->
            Panic.with_finalizer Cloud_Tests_Setup.reset <|
                Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_API_URI" self.api_url.to_text <|
                    Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_CREDENTIALS_FILE" self.credentials_location.absolute.normalize.path <|
                        Cloud_Tests_Setup.reset
                        action
        _ -> action

    pending self = case self of
        Cloud_Tests_Setup.None -> "Cloud tests run only if ENSO_RUN_REAL_CLOUD_TEST or ENSO_HTTP_TEST_HTTPBIN_URL environment variable is defined."
        _ -> Nothing

    real_cloud_pending self = case self of
        Cloud_Tests_Setup.Cloud -> Nothing
        _ -> "These cloud tests only run if ENSO_RUN_REAL_CLOUD_TEST is defined, as they require a proper cloud environment for testing, not just a minimal mock."

    httpbin_pending self =
        if Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL" . is_nothing . not then Nothing else
            "This test requires the ENSO_HTTP_TEST_HTTPBIN_URL environment variable to be defined."

    httpbin_uri self -> URI =
        base_url = Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL"
        if base_url.is_nothing then
            Panic.throw (Illegal_State.Error "ENSO_HTTP_TEST_HTTPBIN_URL environment variable is not defined.")
        with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
        URI.from with_slash

    httpbin_secure_uri self -> URI =
        # TODO we could extend URI to allow easier override of scheme/port, for now we use a hack:
        uri = self.httpbin_uri
        new_text = uri.to_text.replace "http://" "https://" . replace (":"+uri.port.to_text) (":"+(uri.port+1).to_text)
        URI.from new_text

    ## Returns a HTTP instance configured to be able to 'talk' with our test server over HTTPS.
       The test server uses a self-signed certificate, so it needs to be trusted manually.
    httpbin_secure_client self -> HTTP =
        password = "test-password"
        key_store_location = enso_project.root / ".." / ".." / "tools" / "http-test-helper" / "target" / "keystore.jks"
        key_store = KeyStore.getInstance "JKS"
        key_store_location.with_input_stream [File_Access.Read] input_stream->
            input_stream.with_java_stream java_stream->
                key_store.load java_stream password.char_vector

        trust_manager_factory = TrustManagerFactory.getInstance TrustManagerFactory.getDefaultAlgorithm
        trust_manager_factory.init key_store

        ssl_context = SSLContext.getInstance "TLS"
        ssl_context.init Nothing trust_manager_factory.getTrustManagers Nothing
        HTTP.new.set_custom_ssl_context ssl_context

    is_mock self -> Boolean = case self of
        Cloud_Tests_Setup.Mock _ _ -> True
        _ -> False

    ## Flushes all cloud caches in order to allow switch between real and mock cloud environments.
    reset = CloudAPI.flushCloudCaches

    ## Detects the setup based on environment settings.
       If `ENSO_RUN_REAL_CLOUD_TEST` is defined, the tests will try running
       against the real cloud, relying on the default cloud configuration (which
       can be overridden using environment variables).
       Otherwise, if `ENSO_HTTP_TEST_HTTPBIN_URL` is defined, the tests are run
       against a mock implementation,
    prepare : Cloud_Tests_Setup
    prepare =
        real_cloud = Environment.get "ENSO_RUN_REAL_CLOUD_TEST" . is_nothing . not
        case real_cloud of
            True -> Cloud_Tests_Setup.Cloud
            False -> Cloud_Tests_Setup.prepare_mock_setup

    ## Runs the action inside of an environment set up with the Cloud Mock
       running on our HTTP helper, regardless if the 'real' cloud environment is
       available for testing.

       That's because some of our tests should always run on the mock environment
       - for example authentication tests, because only these allow us enough
       customization.

       If `custom_credentials` are not specified, the default test credentials are used.
    run_with_mock_cloud ~action (custom_credentials : Mock_Credentials | Nothing = Nothing) =
        setup = Cloud_Tests_Setup.prepare_mock_setup custom_credentials
        setup.with_prepared_environment action

    ## Prepares a setup that will always call into the local cloud mock.
       This is useful for scenarios like testing credential logic.
    prepare_mock_setup (custom_credentials : Mock_Credentials | Nothing = Nothing) -> Cloud_Tests_Setup =
        base_url = Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL"
        if base_url.is_nothing then Cloud_Tests_Setup.None else
            with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
            enso_cloud_url = with_slash + "enso-cloud-mock/"

            credentials_payload = (custom_credentials.if_nothing (Mock_Credentials.default with_slash)).to_json
            # We need to override the Context in case the tests were running in disabled context mode
            tmp_cred_file = Context.Output.with_enabled <|
                tmp_cred_file = File.create_temporary_file "enso-test-credentials" ".json"
                credentials_payload.write tmp_cred_file
            Problems.assume_no_problems <| tmp_cred_file

            Cloud_Tests_Setup.Mock (URI.from enso_cloud_url) tmp_cred_file

    ## Returns the number of times requests failed due to an expired token.
       Only valid for Mock setup.
    get_expired_token_failures_count self -> Integer = case self of
        Cloud_Tests_Setup.Mock _ _ ->
            uri = self.httpbin_uri / "COUNT-EXPIRED-TOKEN-FAILURES"
            HTTP.fetch uri cache_policy=..No_Cache . decode_as_json
        _ -> Panic.throw (Illegal_State.Error "This method is only valid for Mock setup.")

    ## Runs the action with overridden credentials, clearing caches before and
       after the action to ensure that the credential change is picked up.
    run_with_overridden_credentials path:File ~action =
        Panic.with_finalizer Cloud_Tests_Setup.reset <|
            Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_CREDENTIALS_FILE" path.absolute.normalize.path <|
                Cloud_Tests_Setup.reset
                action

type Mock_Credentials
    Value access_token:Text expire_at:Date_Time refresh_token:Text refresh_url:Text client_id:Text

    default (base_http_url : URI) -> Mock_Credentials =
        expire_at = (Date_Time.now.start_of Time_Period.Minute) + (Period.new years=1)
        refresh_url = base_http_url / "enso-cloud-auth-renew/"
        Mock_Credentials.Value "TEST-ENSO-TOKEN-caffee" expire_at "TEST-ENSO-REFRESH-caffee" refresh_url.to_text "TEST-ENSO-CLIENT-ID"

    to_json self -> Text =
        fields = []
            + [["access_token", self.access_token]]
            + [["expire_at", self.expire_at.at_zone Time_Zone.utc . format Date_Time_Formatter.iso_offset_date_time]]
            + [["refresh_token", self.refresh_token]]
            + [["refresh_url", self.refresh_url]]
            + [["client_id", self.client_id]]
        JS_Object.from_pairs fields . to_json

    set_refresh_token self token:Text =
        Mock_Credentials.Value self.access_token self.expire_at token self.refresh_url self.client_id

    ## Returns a credential whose access token is invalid.
       This will test the case where the refresh token has expired and the user has to re-authenticate.
    invalid_refresh_token self -> Mock_Credentials =
        self.set_refresh_token "INVALID-ENSO-REFRESH-caffee"

    ## Returns a credential whose token has already expired, according to the `expire_at` field.
    locally_expired self -> Mock_Credentials =
        new_expire_at = (Date_Time.now.start_of Time_Period.Minute) - (Duration.new hours=1)
        Mock_Credentials.Value self.access_token new_expire_at self.refresh_token self.refresh_url self.client_id

    ## Returns a credential which does not seem expired, but will be considered expired by the cloud.
       This is to test the very rare edge case when a token is considered not expired locally, but the cloud does consider it expired.
    remotely_expired self -> Mock_Credentials =
        Mock_Credentials.Value "TEST-EXPIRED-TOKEN-beef" self.expire_at self.refresh_token self.refresh_url self.client_id

    ## Returns a credential whose token is about to expire in less than 2 minutes (1 minute).
    about_to_expire self -> Mock_Credentials =
        new_expire_at = Date_Time.now + (Duration.new minutes=1)
        Mock_Credentials.Value self.access_token new_expire_at self.refresh_token self.refresh_url self.client_id

## A temporary directory created in the Cloud.
   Always make sure to register the `cleanup` method to `teardown` of a test
   group to ensure that the directory is cleared after the tests are finished.
type Temporary_Directory
    Value was_initialized:Ref ~get

    timestamp_text -> Text = Date_Time.now.format "yyyy-MM-dd_HHmmss.fV" . replace "/" "."

    make (name : Text) (with_initializer : (Enso_File -> Any) = (_->Nothing)) -> Temporary_Directory =
        was_initialized = Ref.new False
        Temporary_Directory.Value was_initialized <|
            directory_name = "test-run-"+name+"-"+Temporary_Directory.timestamp_text
            test_root = (Enso_File.home / directory_name).create_directory
            test_root.if_not_error <|
                was_initialized.put True
                with_initializer test_root . if_not_error test_root

    cleanup self =
        ## Only run the cleanup if the directory was initialized.
           Otherwise, the mere cleanup action would, unnecessarily,
           initialize it - creating a new directory just to delete it, wasting time.
        if self.was_initialized.get then
            self.get.delete_if_exists recursive=True

create_local_datalink_to enso_file:Enso_File =
    config = JS_Object.from_pairs [["type", "Enso_File"], ["libraryName", "Standard.Base"], ["path", enso_file.path]]
    local_tmp_file = File.create_temporary_file prefix="test-datalink" suffix=".datalink"
    Data_Link.write_config local_tmp_file config replace_existing=True
