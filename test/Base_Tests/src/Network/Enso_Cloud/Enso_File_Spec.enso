from Standard.Base import all
import Standard.Base.Enso_Cloud.Cloud_Caching_Settings
import Standard.Base.Enso_Cloud.Errors.Enso_Cloud_Error
import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.Common.Not_Found
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Unimplemented.Unimplemented
import Standard.Base.Runtime.Context

from Standard.Test import all
import Standard.Test.Test_Environment

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup
import project.Network.Enso_Cloud.Cloud_Tests_Setup.Temporary_Directory

import enso_dev.Base_Tests.System.File_Spec as Local_File_Spec

test_file_text = '[1, 2, 3, "foo"]'

add_specs suite_builder setup:Cloud_Tests_Setup = suite_builder.group "Enso Cloud Files" pending=setup.real_cloud_pending group_builder->
    test_root = Temporary_Directory.make "Enso_File" with_initializer=test_root->
        # Create the expected directory structure.
        Panic.rethrow <| test_file_text.write (test_root / "test_file.json")
        sub = Panic.rethrow <| (test_root / "test-directory").create_directory
        Panic.rethrow <| "Hello Another!".write (sub / "another.txt")
    group_builder.teardown test_root.cleanup

    group_builder.specify "should be able to list a directory" <|
        assets = Enso_File.home.list
        # We don't a priori know the contents, so we can only check very generic properties
        assets . should_be_a Vector
        assets.each f-> f.should_be_a Enso_File

        # We know something about contents of our prepared test directory though
        test_root.get.list.map .name . should_contain "test_file.json"

        # Data.list should also work
        Data.list Enso_File.home . should_be_a Vector
        Data.list "enso://~" . should_be_a Vector
        Data.list test_root.get . map .name . should_contain "test_file.json"
        Data.list test_root.get.path . map .name . should_contain "test_file.json"

    group_builder.specify "list should sort its output" <|
        r = Enso_File.home.list
        r.should_be_a Vector
        as_strings = r.map .to_text
        as_strings . should_equal as_strings.sort

    group_builder.specify "should allow to create and delete a directory" <|
        my_name = "my_test_dir-" + (Random.uuid.take 5)
        my_dir = (test_root.get / my_name).create_directory
        my_dir.should_succeed
        delete_on_fail caught_panic =
            my_dir.delete
            Panic.throw caught_panic
        Panic.catch Any handler=delete_on_fail <| Test.with_retries <|
            my_dir.is_directory . should_be_true
            my_dir.exists . should_be_true
            my_dir.name . should_equal my_name
            test_root.get.list . should_contain my_dir

        my_dir.delete . should_succeed

        Test.with_retries <|
            test_root.get.list . should_not_contain my_dir
            my_dir.exists . should_be_false

    group_builder.specify "should set the current working directory by environment variable" <|
        # If nothing set, defaults to root:
        Enso_File.current_working_directory . should_equal Enso_File.home

        subdir = (test_root.get / ("my_test_CWD-" + Random.uuid.take 5)).create_directory
        subdir.should_succeed
        cleanup =
            Enso_User.flush_caches
            subdir.delete
        Panic.with_finalizer cleanup <|
            Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_PROJECT_DIRECTORY_PATH" subdir.path <|
                # Flush caches to ensure fresh dir is used
                Enso_User.flush_caches

                Enso_File.current_working_directory . should_equal subdir

        # It should be back to default afterwards:
        Enso_File.current_working_directory . should_equal Enso_File.home

    group_builder.specify "should allow to find a file by name" <|
        f = test_root.get / "test_file.json"
        f.should_succeed
        f.name . should_equal "test_file.json"
        f.is_directory . should_be_false
        f.exists . should_be_true

    group_builder.specify "should work if cache is disabled" <|
        old_ttl = Cloud_Caching_Settings.get_file_cache_ttl
        Panic.with_finalizer (Cloud_Caching_Settings.set_file_cache_ttl old_ttl) <|
            # Disable the cache
            Cloud_Caching_Settings.set_file_cache_ttl Nothing

            # We cannot easily check if one or two requests are made, but we just ensure that this doesn't crash.
            f = test_root.get / "test_file.json"
            test_root.get.list . should_contain f
            f.exists . should_be_true
            f.exists . should_be_true

            Test.with_clue "metadata is also readable if the Output Context is disabled: " <|
                Context.Output.with_disabled <|
                    f.size.should_equal 16

    group_builder.specify "should be able to find a file by path" <|
        File.new "enso://" . should_equal Enso_File.root
        File.new "enso://test_file.json" . should_equal (Enso_File.root / "test_file.json")
        File.new "enso://abc/" . should_equal (Enso_File.root / "abc")

    group_builder.specify "should fail to read nonexistent files" <|
        f = Enso_File.root / "nonexistent_file.json"
        f.should_succeed
        f.exists . should_be_false
        r = f.read
        r.should_fail_with File_Error
        r.catch.should_be_a File_Error.Not_Found

    group_builder.specify "should not allow to delete the root or home directory" <|
        Enso_File.root.delete . should_fail_with Illegal_Argument
        Enso_File.home.delete . should_fail_with Any

    # See Inter_Backend_File_Operations_Spec for copy/move tests
    group_builder.specify "should be able to write a file using with_output_stream" <|
        f = test_root.get / "written_file.txt"
        r = f.with_output_stream [File_Access.Write] output_stream->
            output_stream.write_bytes "Hello".utf_8
            42
        r.should_equal 42
        f.read ..Plain_Text . should_equal "Hello"

    group_builder.specify "will respect Create_New in with_output_stream" <|
        test_file = test_root.get / "test_file.json"
        test_file.exists . should_be_true

        r = test_file.with_output_stream [File_Access.Create_New, File_Access.Write] output_stream->
            output_stream.write_bytes "ABC".utf_8
            42
        r.should_fail_with File_Error
        r.catch.should_be_a File_Error.Already_Exists
        test_file.read ..Plain_Text . should_equal test_file_text

    group_builder.specify "should be able to write a file using write_bytes" <|
        f = test_root.get / "written_file2.txt"
        "hi!".utf_8.write_bytes f . should_succeed
        f.read ..Plain_Text . should_equal "hi!"

    group_builder.specify "should be able to upload and download big files" <|
        f = test_root.get / "big_file.txt"
        # Let's say 42MB is big enough of a stress test
        kilobytes_to_write = 42 * 1024
        one_kilobyte = "A".repeat 1024 . utf_8
        r = f.with_output_stream [File_Access.Write] output_stream->
            0.up_to kilobytes_to_write . each _->
                output_stream.write_bytes one_kilobyte
        r.should_succeed
        # Check that the uploaded size is as expected
        f.size . should_equal (kilobytes_to_write * 1024)

        # And now try to download it
        v = f.read Bytes
        v.should_be_a Vector
        v.length . should_equal f.size

    group_builder.specify "does not currently support append" <|
        f = test_root.get / "written_file3.txt"
        Test.expect_panic Unimplemented <|
            f.with_output_stream [File_Access.Append, File_Access.Write] output_stream->
                output_stream.write_bytes "DEF".utf_8
                42

    group_builder.specify "does not create additional files in Backup mode, because Cloud has its own versioning" <|
        dir = (test_root.get / "empty-folder").create_directory
        dir.list.should_equal []

        f = dir / "file.txt"
        f.exists.should_be_false
        "ABC".write f on_existing_file=Existing_File_Behavior.Overwrite . should_equal f
        "DEF".write f on_existing_file=Existing_File_Behavior.Backup . should_equal f
        f.read ..Plain_Text . should_equal "DEF"

        # But there should not be any other files in the directory
        dir.list.should_equal [f]

    group_builder.specify "fails to write with Existing_File_Behavior.Error if the file exists" <|
        f = test_root.get / "existing-file-behavior-error.txt"

        f.exists.should_be_false
        "ABC".write f on_existing_file=Existing_File_Behavior.Error . should_equal f
        r = "DEF".write f on_existing_file=Existing_File_Behavior.Error
        r.should_fail_with File_Error
        r.catch.should_be_a File_Error.Already_Exists

        # The file contents stay unchanged - write was prevented
        f.read . should_equal "ABC"

    group_builder.specify "fails to write if Output context is disabled" <|
        f = test_root.get / "output-disabled.txt"
        f.exists . should_be_false

        Context.Output.with_disabled <|
            r = "ABC".write f
            r.should_fail_with Forbidden_Operation
            r.catch.to_display_text . should_contain "As writing is disabled, no action has been performed"
        # The file should not have been created
        f.exists . should_be_false

    group_builder.specify "fails to write if the parent directory does not exist" <|
        f = test_root.get / "nonexistent-dir" / "file.txt"
        r = "ABC".write f
        r.should_fail_with File_Error
        r.catch.should_be_a File_Error.Not_Found

    group_builder.specify "should be able to read and decode a file using various formats" <|
        test_file = test_root.get / "test_file.json"
        test_file.exists . should_be_true

        test_file.read ..Plain_Text . should_equal test_file_text

        # auto-detection of JSON format:
        json = test_file.read
        json.should_be_a Vector
        json.should_equal [1, 2, 3, "foo"]

        test_file.read_bytes . should_equal test_file_text.utf_8

    group_builder.specify "should be able to read the file by path using Data.read" <|
        test_root.get.path . should_contain "enso://"
        Data.read test_root.get.path+"/test_file.json" . should_equal [1, 2, 3, "foo"]
        Data.read test_root.get.path+"/test-directory/another.txt" . should_equal "Hello Another!"

        r = Data.read test_root.get.path+"/test-directory/nonexistent-directory/some-file.txt"
        r.should_fail_with File_Error
        r.catch.should_be_a File_Error.Not_Found

    group_builder.specify "read_many should work with Cloud files" <|
        paths = [test_root.get / "test_file.json", test_root.get / "test-directory/another.txt"]
        r = Data.read_many paths return=..As_Vector
        r.should_equal [[1, 2, 3, "foo"], "Hello Another!"]

    group_builder.specify "should be able to open a file as input stream" <|
        test_file = test_root.get / "test_file.json"
        test_file.exists . should_be_true

        bytes = test_file.with_input_stream [File_Access.Read] stream->
            stream.read_all_bytes

        bytes.should_equal test_file_text.utf_8

    group_builder.specify "should be able to read file metadata" <|
        Enso_File.root.exists . should_be_true
        Enso_File.root.name . should_equal ""

        dir = test_root.get / "test-directory"
        dir.exists.should_be_true
        dir.name . should_equal "test-directory"
        dir.extension . should_equal ""
        dir.is_directory.should_be_true
        dir.is_regular_file.should_be_false
        dir.size . should_fail_with Illegal_Argument

        nested_file = dir / "another.txt"
        nested_file.exists.should_be_true
        nested_file.name . should_equal "another.txt"
        nested_file.extension . should_equal ".txt"
        nested_file.is_directory.should_be_false
        nested_file.is_regular_file.should_be_true
        nested_file.size . should_equal nested_file.read_bytes.length
        nested_file.creation_time . should_be_a Date_Time
        nested_file.last_modified_time . should_be_a Date_Time

        Enso_File.root.parent . should_equal Nothing
        Enso_File.root.path . should_equal "enso://"

        dir.path . should_contain "enso://"
        dir.path . should_contain "/test-directory"
        dir.parent . should_equal test_root.get
        dir.is_descendant_of Enso_File.root . should_be_true
        Enso_File.root.is_descendant_of dir . should_be_false

        nested_file.path . should_contain "enso://"
        nested_file.path . should_contain "/test-directory/another.txt"
        nested_file.parent . should_equal dir

        nested_file.is_descendant_of dir . should_be_true
        nested_file.is_descendant_of Enso_File.root . should_be_true

        # Some edge cases
        (Enso_File.root / "test-directory-longer-name") . is_descendant_of (Enso_File.root / "test-directory") . should_be_false
        (Enso_File.root / "test-directory" / "non-existent") . is_descendant_of (Enso_File.root / "test-directory") . should_be_true
        (Enso_File.root / "test-directory") . is_descendant_of (Enso_File.root / "test-directory" / "non-existent") . should_be_false

    group_builder.specify "supports partial metadata for directories" <|
        dir = test_root.get / "test-directory"
        dir.last_modified_time.should_be_a Date_Time

        # TODO this test should be 'reversed' and merged with above once the metadata is implemented
        dir.creation_time.should_fail_with Illegal_Argument

    group_builder.specify "should be able to read and modify asset description" <|
        nested_file = test_root.get / "test-directory" / "another.txt"
        nested_file.description . should_equal ""

        my_description = "This is a test file."
        nested_file.set_description my_description . should_equal nested_file
        nested_file.description . should_equal my_description

        # We can also set description back to empty
        nested_file.set_description "" . should_equal nested_file
        nested_file.description . should_equal ""

        Context.Output.with_disabled <|
            nested_file.set_description "ABC" . should_fail_with Forbidden_Operation

    group_builder.specify "should be able to get and modify labels on assets" <|
        f = test_root.get / "test_file.json"
        f.labels . should_equal []

        f.set_labels ["A", "B", "C", "D"] . should_equal f
        f.labels . should_equal_ignoring_order ["A", "B", "C", "D"]

        f.add_label "E" . should_equal f
        f.add_label "A" . should_equal f
        f.labels . should_equal_ignoring_order ["A", "B", "C", "D", "E"]

        f.remove_label "B" . should_equal True
        f.remove_label "C" . should_equal True
        f.labels . should_equal_ignoring_order ["A", "D", "E"]

        f.remove_label "non-existent" . should_equal False
        # B is also already removed
        f.remove_label "B" . should_equal False
        f.labels . should_equal_ignoring_order ["A", "D", "E"]

        Context.Output.with_disabled <|
            # Adding new label with disabled context fails
            f.add_label "new" . should_fail_with Forbidden_Operation

            # Removing a label that is there also fails
            f.remove_label "A" . should_fail_with Forbidden_Operation

            f.labels . should_equal_ignoring_order ["A", "D", "E"]

            # But adding a label that is already there or removing one that is not (so no effective change), succeeds:
            f.add_label "A" . should_equal f
            f.remove_label "non-existent" . should_equal False

    group_builder.specify "can get and set metadata on just-created asset" <|
        ## This is a bit of a white-box test - we know that just-created assets are cached without metadata,
           so we want to test this case to ensure nothing breaks here.
        f = (test_root.get / "my-directory-for-metadata").create_directory
        f.should_succeed

        f.description . should_equal ""
        f.labels . should_equal []

        f.set_description "ABC" . should_succeed
        f.description . should_equal "ABC"

        # Also test setting metadata before querying it:
        g = (test_root.get / "my-directory-for-metadata-2").create_directory
        g.set_labels ["A"] . should_succeed
        g.labels . should_equal ["A"]

    group_builder.specify "allows / as well as .. and . in resolve" <|
        (Enso_File.root / "a/b/c") . should_equal (Enso_File.root / "a" / "b" / "c")
        (Enso_File.root / "a///b/c") . should_equal (Enso_File.root / "a" / "b" / "c")
        (Enso_File.root / "a/b/c/./././d/e/../f/../..") . should_equal (Enso_File.root / "a" / "b" / "c")

        r = Enso_File.root / ".."
        r.should_fail_with Illegal_Argument
        r.catch.to_display_text . should_contain "Cannot move above root"

    group_builder.specify "resolves ~ to user home" <|
        Enso_File.new "enso://~" . should_equal Enso_File.home
        Enso_File.new "enso://~/a/b/c" . should_equal (Enso_File.home / "a/b/c")

        # It also works when resolving a path
        (Enso_File.root / "~") . should_equal Enso_File.home
        (Enso_File.root / "a/../~/b/c") . should_equal (Enso_File.home / "b/c")
        Enso_File.new "enso://a/../~/b/c" . should_equal (Enso_File.home / "b/c")

        # But a filename only containing ~ is not resolved
        Enso_File.new "enso://~~~" . should_not_equal Enso_File.home

        # If the `~` is not at the beginning, it is not resolved
        Enso_File.new "enso://a/b/c/~" . should_not_equal Enso_File.home

    Local_File_Spec.add_create_and_delete_directory_specs group_builder test_root.get
    Local_File_Spec.add_copy_edge_cases_specs group_builder test_root.get

main filter=Nothing =
    setup = Cloud_Tests_Setup.prepare
    suite = Test.build suite_builder->
        add_specs suite_builder setup
    suite.run_with_filter filter
