{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$defs": {
    "DataLink": {
      "title": "Data Link",
      "anyOf": [
        { "$ref": "#/$defs/S3DataLink" },
        { "$ref": "#/$defs/EnsoFileDataLink" },
        { "$ref": "#/$defs/HttpFetchDataLink" },
        { "$ref": "#/$defs/PostgresDataLink" },
        { "$ref": "#/$defs/SnowflakeDataLink" },
        { "$ref": "#/$defs/SQLServerDataLink" }
      ],
      "$comment": "The fields `type` and `libraryName` are required for all data link types, but we currently don't add a top-level `required` setting to the schema, because it was confusing the code that is generating the modal."
    },
    "SecureValue": {
      "title": "Secure Value",
      "anyOf": [{ "title": "Text", "type": "string" }, { "$ref": "#/$defs/EnsoSecret" }]
    },
    "EnsoSecret": {
      "title": "Enso Secret",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "secret", "type": "string" },
        "secretPath": {
          "title": "Path",
          "type": "string",
          "format": "enso-secret"
        }
      },
      "required": ["type", "secretPath"]
    },
    "BooleanOrInfer": {
      "anyOf": [
        { "title": "Infer", "const": "infer", "type": "string" },
        { "title": "True", "const": true, "type": "boolean" },
        { "title": "False", "const": false, "type": "boolean" }
      ]
    },

    "AwsAuth": {
      "title": "AWS Authentication",
      "anyOf": [
        { "$ref": "#/$defs/AwsDefaultAuth" },
        { "$ref": "#/$defs/AwsProfileAuth" },
        { "$ref": "#/$defs/AwsAccessKeyAuth" }
      ]
    },
    "AwsDefaultAuth": {
      "title": "AWS (Default)",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "aws_auth", "type": "string" },
        "subType": { "title": "Subtype", "const": "default", "type": "string" }
      },
      "required": ["type", "subType"]
    },
    "AwsProfileAuth": {
      "title": "AWS (Profile)",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "aws_auth", "type": "string" },
        "subType": { "title": "Subtype", "const": "profile", "type": "string" },
        "profile": {
          "title": "Profile",
          "description": "Must not be blank.",
          "type": "string",
          "minLength": 1
        }
      },
      "required": ["type", "subType", "profile"]
    },
    "AwsAccessKeyAuth": {
      "title": "AWS (Access Key)",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "aws_auth", "type": "string" },
        "subType": {
          "title": "Subtype",
          "const": "access_key",
          "type": "string"
        },
        "accessKeyId": {
          "title": "Access Key ID",
          "$ref": "#/$defs/SecureValue"
        },
        "secretAccessKey": {
          "title": "Secret Access Key",
          "$ref": "#/$defs/SecureValue"
        }
      },
      "required": ["type", "subType", "accessKeyId", "secretAccessKey"]
    },

    "S3DataLink": {
      "title": "S3",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "S3", "type": "string" },
        "libraryName": { "const": "Standard.AWS" },
        "uri": {
          "title": "URI",
          "description": "Must start with \"s3://\".",
          "type": "string",
          "pattern": "^s3://[a-z0-9.-]{3,63}/.{1,1024}$"
        },
        "auth": { "title": "Authentication", "$ref": "#/$defs/AwsAuth" },
        "format": { "title": "Format", "$ref": "#/$defs/Format" }
      },
      "required": ["type", "libraryName", "uri", "auth"]
    },
    "EnsoFileDataLink": {
      "title": "Enso File",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "Enso_File", "type": "string" },
        "libraryName": { "const": "Standard.Base" },
        "path": {
          "title": "Path",
          "description": "Must start with \"enso://Users/<username>/\" or \"enso://Teams/<team name>/\".",
          "type": "string",
          "pattern": "^enso://(?:Users|Teams)/.*/.*$",
          "format": "enso-file"
        },
        "format": { "title": "Format", "$ref": "#/$defs/Format" }
      },
      "required": ["type", "libraryName", "path"]
    },
    "HttpFetchDataLink": {
      "$comment": "missing <headers with secrets> and <query string with secrets>",
      "title": "HTTP Fetch",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "HTTP", "type": "string" },
        "libraryName": { "const": "Standard.Base" },
        "uri": {
          "title": "URI",
          "description": "Must start with \"http://\" or \"https://\".",
          "type": "string",
          "pattern": "^https?://[\\w.~-]+/?.*$"
        },
        "method": { "title": "Method", "const": "GET", "type": "string" },
        "format": { "title": "Format", "$ref": "#/$defs/Format" }
      },
      "required": ["type", "libraryName", "uri", "method"]
    },
    "PostgresDataLink": {
      "title": "Postgres Database Connection",
      "type": "object",
      "properties": {
        "type": {
          "title": "Type",
          "const": "Postgres_Connection",
          "type": "string"
        },
        "libraryName": { "const": "Standard.Database" },
        "host": {
          "title": "Hostname",
          "type": "string"
        },
        "port": {
          "title": "Port",
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "default": 5432
        },
        "database_name": {
          "title": "Database Name",
          "type": "string"
        },
        "schema": {
          "title": "Schema",
          "type": "string"
        },
        "credentials": {
          "title": "Credentials",
          "type": "object",
          "properties": {
            "username": {
              "title": "Username",
              "$ref": "#/$defs/SecureValue"
            },
            "password": {
              "title": "Password",
              "$ref": "#/$defs/SecureValue"
            }
          },
          "required": ["username", "password"]
        },
        "table": {
          "title": "Table to access",
          "$ref": "#/$defs/DatabaseTableDefinition"
        }
      },
      "required": ["type", "libraryName", "host", "port", "database_name"]
    },
    "SnowflakeDataLink": {
      "title": "Snowflake Database Connection",
      "type": "object",
      "properties": {
        "type": {
          "title": "Type",
          "const": "Snowflake_Connection",
          "type": "string"
        },
        "libraryName": { "const": "Standard.Snowflake" },
        "account": {
          "title": "Account",
          "type": "string"
        },
        "database_name": {
          "title": "Database Name",
          "type": "string"
        },
        "schema": {
          "title": "Schema",
          "type": "string"
        },
        "warehouse": {
          "title": "Warehouse",
          "type": "string"
        },
        "credentials": {
          "title": "Credentials",
          "type": "object",
          "properties": {
            "username": {
              "title": "Username",
              "$ref": "#/$defs/SecureValue"
            },
            "password": {
              "title": "Password",
              "$ref": "#/$defs/SecureValue"
            }
          },
          "required": ["username", "password"]
        },
        "table": {
          "title": "Table to access",
          "$ref": "#/$defs/DatabaseTableDefinition"
        }
      },
      "required": ["type", "libraryName", "account", "database_name", "credentials"]
    },
    "SQLServerDataLink": {
      "title": "SQL Server Database Connection",
      "type": "object",
      "properties": {
        "type": {
          "title": "Type",
          "const": "SQLServer_Connection",
          "type": "string"
        },
        "libraryName": { "const": "Standard.Microsoft" },
        "host": {
          "title": "Hostname",
          "type": "string"
        },
        "port": {
          "title": "Port",
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "default": 1433
        },
        "database_name": {
          "title": "Database Name",
          "type": "string"
        },
        "credentials": {
          "title": "Credentials",
          "type": "object",
          "properties": {
            "username": {
              "title": "Username",
              "$ref": "#/$defs/SecureValue"
            },
            "password": {
              "title": "Password",
              "$ref": "#/$defs/SecureValue"
            }
          },
          "required": ["username", "password"]
        },
        "table": {
          "title": "Table to access",
          "$ref": "#/$defs/DatabaseTableDefinition"
        }
      },
      "required": ["type", "libraryName", "host", "port", "database_name"]
    },

    "Format": {
      "title": "Format",
      "anyOf": [
        { "$ref": "#/$defs/DefaultFormat" },
        { "$ref": "#/$defs/DelimitedFormat" },
        { "$ref": "#/$defs/JsonFormat" },
        { "$ref": "#/$defs/ExcelFormat" }
      ]
    },
    "DefaultFormat": {
      "title": "Default",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "format", "type": "string" },
        "subType": { "title": "Subtype", "const": "default", "type": "string" }
      },
      "required": ["type", "subType"]
    },
    "DelimitedFormat": {
      "title": "Delimited",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "format", "type": "string" },
        "subType": {
          "title": "Subtype",
          "const": "delimited",
          "type": "string"
        },
        "delimiter": {
          "title": "Delimiter",
          "description": "Must not be blank.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1
        },
        "encoding": { "title": "Encoding", "const": "utf8", "type": "string" },
        "headers": {
          "title": "Headers",
          "description": "Whether a header row containing column names is present.",
          "$ref": "#/$defs/BooleanOrInfer"
        },
        "quote_style": {
          "title": "Custom Quotes",
          "anyOf": [
            { "$ref": "#/$defs/DelimitedQuoteStyle" },
            { "$ref": "#/$defs/DelimitedQuoteStyleNo" }
          ]
        }
      },
      "required": ["type", "subType", "delimiter", "headers"]
    },
    "JsonFormat": {
      "title": "JSON",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "format", "type": "string" },
        "subType": { "title": "Type", "const": "json", "type": "string" }
      },
      "required": ["type", "subType"]
    },
    "ExcelFormat": {
      "title": "Excel",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "format", "type": "string" },
        "subType": { "title": "Type", "const": "excel", "type": "string" },
        "section": {
          "title": "Section",
          "anyOf": [
            { "$ref": "#/$defs/ExcelSectionWorkbook" },
            { "$ref": "#/$defs/ExcelSectionSheet" },
            { "$ref": "#/$defs/ExcelSectionRange" }
          ]
        }
      },
      "required": ["type", "subType", "section"]
    },

    "ExcelSectionWorkbook": {
      "title": "Workbook",
      "type": "object",
      "properties": {
        "type": { "const": "workbook", "type": "string" },
        "defaultSheet": {
          "title": "Default sheet (for writing)",
          "description": "The default sheet used when writing a table to the workbook that this data link points to.",
          "type": "string",
          "minLength": 1,
          "default": "EnsoSheet"
        }
      },
      "required": ["type"]
    },
    "ExcelSectionSheet": {
      "title": "Sheet",
      "type": "object",
      "properties": {
        "type": { "const": "sheet", "type": "string" },
        "name": {
          "title": "Sheet name",
          "description": "Must not be blank.",
          "type": "string",
          "minLength": 1
        },
        "headers": {
          "title": "Headers",
          "description": "Whether a header row containing column names is present at the top of the sheet.",
          "$ref": "#/$defs/BooleanOrInfer"
        }
      },
      "required": ["type", "name", "headers"]
    },
    "ExcelSectionRange": {
      "title": "Range",
      "type": "object",
      "properties": {
        "type": { "const": "range", "type": "string" },
        "address": {
          "title": "Address",
          "description": "Must not be blank.",
          "type": "string",
          "minLength": 1,
          "examples": ["Sheet1!A1:B2"]
        },
        "headers": {
          "title": "Headers",
          "description": "Whether a header row containing column names is present at the top of the range.",
          "$ref": "#/$defs/BooleanOrInfer"
        }
      },
      "required": ["type", "address", "headers"]
    },

    "DelimitedQuoteStyle": {
      "title": "Custom quotes",
      "type": "object",
      "properties": {
        "type": { "title": "Type", "const": "quote_style", "type": "string" },
        "subType": {
          "title": "Subtype",
          "const": "with_quotes",
          "type": "string"
        },
        "quote": {
          "title": "Quote",
          "description": "Must be exactly one character.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "default": "\"",
          "examples": ["\"", "'"]
        },
        "escape": {
          "title": "Escape",
          "description": "Must be exactly one character. The character that is prepended to the quote character to escape it.",
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "default": "\"",
          "examples": ["\"", "\\"]
        }
      },
      "required": ["type", "subType", "quote", "escape"]
    },
    "DelimitedQuoteStyleNo": {
      "type": "object",
      "title": "Ignore quotes",
      "properties": {
        "type": { "title": "Type", "const": "quote_style", "type": "string" },
        "subType": {
          "title": "Subtype",
          "const": "no_quotes",
          "type": "string"
        }
      },
      "required": ["type", "subType"]
    },

    "DatabaseTableDefinition": {
      "title": "Query to read",
      "anyOf": [
        { "title": "Table", "type": "string" },
        {
          "title": "SQL Query",
          "type": "object",
          "properties": {
            "query": {
              "title": "SQL",
              "type": "string"
            }
          },
          "required": ["query"]
        },
        {
          "title": "(Advanced) JSON serialized interpolated SQL statement",
          "type": "object",
          "properties": {
            "sql_statement": {
              "title": "SQL_Statement (JSON)",
              "type": "string"
            }
          },
          "required": ["sql_statement"]
        }
      ]
    }
  }
}
