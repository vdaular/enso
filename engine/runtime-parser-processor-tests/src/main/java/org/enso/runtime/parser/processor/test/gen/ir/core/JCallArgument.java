package org.enso.runtime.parser.processor.test.gen.ir.core;

import java.util.function.Function;
import org.enso.compiler.core.IR;
import org.enso.compiler.core.ir.Expression;
import org.enso.compiler.core.ir.Name;
import org.enso.runtime.parser.dsl.GenerateFields;
import org.enso.runtime.parser.dsl.GenerateIR;
import org.enso.runtime.parser.dsl.IRChild;
import org.enso.runtime.parser.dsl.IRField;
import scala.Option;

/** Call-site arguments in Enso. */
public interface JCallArgument extends IR {
  /** The name of the argument, if present. */
  Option<Name> name();

  /** The expression of the argument, if present. */
  Expression value();

  /** Flag indicating that the argument was generated by compiler. */
  boolean isSynthetic();

  @Override
  JCallArgument mapExpressions(Function<Expression, Expression> fn);

  @Override
  JCallArgument duplicate(
      boolean keepLocations,
      boolean keepMetadata,
      boolean keepDiagnostics,
      boolean keepIdentifiers);

  @GenerateIR(interfaces = {JCallArgument.class})
  final class JSpecified extends JSpecifiedGen {
    @GenerateFields
    public JSpecified(
        @IRField boolean isSynthetic, @IRChild Option<Name> name, @IRChild Expression value) {
      super(isSynthetic, name, value);
    }
  }
}
