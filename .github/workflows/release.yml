# This file is auto-generated. Do not edit it manually!
# Edit the enso_build::ci_gen module instead and run `cargo run --package enso-build-ci-gen`.

name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: What version number this release should get.
        required: true
        type: string
      ydoc:
        description: What kind of Ydoc image to build.
        required: false
        type: choice
        default: nodejs
        options:
          - nodejs
          - polyglot
  workflow_call:
    inputs:
      version:
        description: What version number this release should get.
        required: true
        type: string
      ydoc:
        description: What kind of Ydoc image to build.
        required: false
        type: string
        default: nodejs
concurrency: release
jobs:
  enso-build-ci-gen-draft-release-linux-amd64:
    name: Create a release draft.
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: prepare
        run: ./run release create-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      ENSO_RELEASE_ID: ${{ steps.prepare.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ steps.prepare.outputs.ENSO_VERSION }}
  enso-build-ci-gen-job-deploy-runtime-linux-amd64:
    name: Upload Runtime to ECR (linux, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-upload-backend-linux-amd64
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: "(contains(github.event.pull_request.labels.*.name, 'CI: Clean build required') || inputs.clean_build_required)"
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run release deploy-runtime
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_PUSH_RUNTIME_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_PUSH_RUNTIME_SECRET_ACCESS_KEY }}
          ENSO_BUILD_ECR_REPOSITORY: runtime
          GITHUB_TOKEN: ${{ secrets.CI_PRIVATE_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: "(always()) && (contains(github.event.pull_request.labels.*.name, 'CI: Clean build required') || inputs.clean_build_required)"
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-job-deploy-ydoc-linux-amd64:
    name: Upload Ydoc to ECR (linux, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-upload-backend-linux-amd64
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run release deploy-ydoc-${{ inputs.ydoc }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_PUSH_RUNTIME_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_PUSH_RUNTIME_SECRET_ACCESS_KEY }}
          ENSO_BUILD_ECR_REPOSITORY: ydoc
          GITHUB_TOKEN: ${{ secrets.CI_PRIVATE_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-job-dispatch-build-image-linux-amd64:
    name: Dispatch Cloud build-image workflow (linux, amd64)
    needs:
      - enso-build-ci-gen-job-deploy-runtime-linux-amd64
      - enso-build-ci-gen-job-deploy-ydoc-linux-amd64
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: "(contains(github.event.pull_request.labels.*.name, 'CI: Clean build required') || inputs.clean_build_required)"
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run release dispatch-build-image
        env:
          GITHUB_TOKEN: ${{ secrets.CI_PRIVATE_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: "(always()) && (contains(github.event.pull_request.labels.*.name, 'CI: Clean build required') || inputs.clean_build_required)"
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  enso-build-ci-gen-job-upload-backend-linux-amd64:
    name: Upload Backend (linux, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-job-upload-backend-macos-aarch64:
    name: Upload Backend (macos, aarch64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
    runs-on:
      - self-hosted
      - macOS
      - ARM64
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-job-upload-backend-macos-amd64:
    name: Upload Backend (macos, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
    runs-on:
      - macos-13
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-job-upload-backend-windows-amd64:
    name: Upload Backend (windows, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
    runs-on:
      - self-hosted
      - Windows
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run backend upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-publish-release-linux-amd64:
    name: Publish release (linux, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-dispatch-build-image-linux-amd64
      - enso-build-ci-gen-upload-ide-linux-amd64
      - enso-build-ci-gen-upload-ide-macos-aarch64
      - enso-build-ci-gen-upload-ide-macos-amd64
      - enso-build-ci-gen-upload-ide-windows-amd64
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: "(contains(github.event.pull_request.labels.*.name, 'CI: Clean build required') || inputs.clean_build_required)"
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run release publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: "(always()) && (contains(github.event.pull_request.labels.*.name, 'CI: Clean build required') || inputs.clean_build_required)"
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.ARTEFACT_S3_ACCESS_KEY_ID }}
      AWS_REGION: us-west-1
      AWS_SECRET_ACCESS_KEY: ${{ secrets.ARTEFACT_S3_SECRET_ACCESS_KEY }}
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-upload-ide-linux-amd64:
    name: Build IDE (linux, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-upload-backend-linux-amd64
    runs-on:
      - self-hosted
      - Linux
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run ide upload --backend-source release --backend-release ${{env.ENSO_RELEASE_ID}} --sign-artifacts
        env:
          ENSO_IDE_AG_GRID_LICENSE_KEY: ${{ vars.ENSO_AG_GRID_LICENSE_KEY }}
          ENSO_IDE_API_URL: ${{ vars.ENSO_CLOUD_API_URL }}
          ENSO_IDE_AUTH_ENDPOINT: ${{ vars.ENSO_CLOUD_AUTH_ENDPOINT }}
          ENSO_IDE_CHAT_URL: ${{ vars.ENSO_CLOUD_CHAT_URL }}
          ENSO_IDE_COGNITO_DOMAIN: ${{ vars.ENSO_CLOUD_COGNITO_DOMAIN }}
          ENSO_IDE_COGNITO_REGION: ${{ vars.ENSO_CLOUD_COGNITO_REGION }}
          ENSO_IDE_COGNITO_USER_POOL_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_ID }}
          ENSO_IDE_COGNITO_USER_POOL_WEB_CLIENT_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_WEB_CLIENT_ID }}
          ENSO_IDE_ENVIRONMENT: ${{ vars.ENSO_CLOUD_ENVIRONMENT }}
          ENSO_IDE_GOOGLE_ANALYTICS_TAG: ${{ vars.ENSO_CLOUD_GOOGLE_ANALYTICS_TAG }}
          ENSO_IDE_MAPBOX_API_TOKEN: ${{ vars.ENSO_MAPBOX_API_TOKEN }}
          ENSO_IDE_SENTRY_DSN: ${{ vars.ENSO_CLOUD_SENTRY_DSN }}
          ENSO_IDE_SENTRY_ORGANIZATION: ${{ vars.ENSO_CLOUD_SENTRY_ORGANIZATION }}
          ENSO_IDE_SENTRY_PROJECT: ${{ vars.ENSO_CLOUD_SENTRY_PROJECT }}
          ENSO_IDE_STRIPE_KEY: ${{ vars.ENSO_CLOUD_STRIPE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-upload-ide-macos-aarch64:
    name: Build IDE (macos, aarch64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-upload-backend-macos-aarch64
    runs-on:
      - self-hosted
      - macOS
      - ARM64
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run ide upload --backend-source release --backend-release ${{env.ENSO_RELEASE_ID}} --sign-artifacts
        env:
          APPLEID: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
          APPLEIDPASS: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
          APPLETEAMID: ${{ secrets.APPLE_NOTARIZATION_TEAM_ID }}
          CSC_FOR_PULL_REQUEST: "true"
          CSC_IDENTITY_AUTO_DISCOVERY: "true"
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CODE_SIGNING_CERT_PASSWORD }}
          CSC_LINK: ${{ secrets.APPLE_CODE_SIGNING_CERT }}
          ENSO_IDE_AG_GRID_LICENSE_KEY: ${{ vars.ENSO_AG_GRID_LICENSE_KEY }}
          ENSO_IDE_API_URL: ${{ vars.ENSO_CLOUD_API_URL }}
          ENSO_IDE_AUTH_ENDPOINT: ${{ vars.ENSO_CLOUD_AUTH_ENDPOINT }}
          ENSO_IDE_CHAT_URL: ${{ vars.ENSO_CLOUD_CHAT_URL }}
          ENSO_IDE_COGNITO_DOMAIN: ${{ vars.ENSO_CLOUD_COGNITO_DOMAIN }}
          ENSO_IDE_COGNITO_REGION: ${{ vars.ENSO_CLOUD_COGNITO_REGION }}
          ENSO_IDE_COGNITO_USER_POOL_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_ID }}
          ENSO_IDE_COGNITO_USER_POOL_WEB_CLIENT_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_WEB_CLIENT_ID }}
          ENSO_IDE_ENVIRONMENT: ${{ vars.ENSO_CLOUD_ENVIRONMENT }}
          ENSO_IDE_GOOGLE_ANALYTICS_TAG: ${{ vars.ENSO_CLOUD_GOOGLE_ANALYTICS_TAG }}
          ENSO_IDE_MAPBOX_API_TOKEN: ${{ vars.ENSO_MAPBOX_API_TOKEN }}
          ENSO_IDE_SENTRY_DSN: ${{ vars.ENSO_CLOUD_SENTRY_DSN }}
          ENSO_IDE_SENTRY_ORGANIZATION: ${{ vars.ENSO_CLOUD_SENTRY_ORGANIZATION }}
          ENSO_IDE_SENTRY_PROJECT: ${{ vars.ENSO_CLOUD_SENTRY_PROJECT }}
          ENSO_IDE_STRIPE_KEY: ${{ vars.ENSO_CLOUD_STRIPE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-upload-ide-macos-amd64:
    name: Build IDE (macos, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-upload-backend-macos-amd64
    runs-on:
      - macos-13
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run ide upload --backend-source release --backend-release ${{env.ENSO_RELEASE_ID}} --sign-artifacts
        env:
          APPLEID: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
          APPLEIDPASS: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
          APPLETEAMID: ${{ secrets.APPLE_NOTARIZATION_TEAM_ID }}
          CSC_FOR_PULL_REQUEST: "true"
          CSC_IDENTITY_AUTO_DISCOVERY: "true"
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CODE_SIGNING_CERT_PASSWORD }}
          CSC_LINK: ${{ secrets.APPLE_CODE_SIGNING_CERT }}
          ENSO_IDE_AG_GRID_LICENSE_KEY: ${{ vars.ENSO_AG_GRID_LICENSE_KEY }}
          ENSO_IDE_API_URL: ${{ vars.ENSO_CLOUD_API_URL }}
          ENSO_IDE_AUTH_ENDPOINT: ${{ vars.ENSO_CLOUD_AUTH_ENDPOINT }}
          ENSO_IDE_CHAT_URL: ${{ vars.ENSO_CLOUD_CHAT_URL }}
          ENSO_IDE_COGNITO_DOMAIN: ${{ vars.ENSO_CLOUD_COGNITO_DOMAIN }}
          ENSO_IDE_COGNITO_REGION: ${{ vars.ENSO_CLOUD_COGNITO_REGION }}
          ENSO_IDE_COGNITO_USER_POOL_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_ID }}
          ENSO_IDE_COGNITO_USER_POOL_WEB_CLIENT_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_WEB_CLIENT_ID }}
          ENSO_IDE_ENVIRONMENT: ${{ vars.ENSO_CLOUD_ENVIRONMENT }}
          ENSO_IDE_GOOGLE_ANALYTICS_TAG: ${{ vars.ENSO_CLOUD_GOOGLE_ANALYTICS_TAG }}
          ENSO_IDE_MAPBOX_API_TOKEN: ${{ vars.ENSO_MAPBOX_API_TOKEN }}
          ENSO_IDE_SENTRY_DSN: ${{ vars.ENSO_CLOUD_SENTRY_DSN }}
          ENSO_IDE_SENTRY_ORGANIZATION: ${{ vars.ENSO_CLOUD_SENTRY_ORGANIZATION }}
          ENSO_IDE_SENTRY_PROJECT: ${{ vars.ENSO_CLOUD_SENTRY_PROJECT }}
          ENSO_IDE_STRIPE_KEY: ${{ vars.ENSO_CLOUD_STRIPE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
  enso-build-ci-gen-upload-ide-windows-amd64:
    name: Build IDE (windows, amd64)
    needs:
      - enso-build-ci-gen-draft-release-linux-amd64
      - enso-build-ci-gen-job-upload-backend-windows-amd64
    runs-on:
      - self-hosted
      - Windows
    steps:
      - if: runner.os == 'Windows'
        name: Setup required bazel environment
        run: "\n\"BAZEL_SH=C:\\Program Files\\Git\\bin\\bash.exe\" >> $env:GITHUB_ENV\n\"BAZEL_VC=C:\\BuildTools\\VC\" >> $env:GITHUB_ENV\n        "
        shell: pwsh
      - name: Setup bazel environment
        uses: bazel-contrib/setup-bazel@09f3a72d13a081857b0ee94e986ffa84caef7c85
        with:
          bazelisk-cache: true
          disk-cache: true
          output-base: ${{ runner.os == 'Windows' && 'c:/_bazel' || '' }}
          repository-cache: true
      - if: startsWith(runner.name, 'GitHub Actions') || startsWith(runner.name, 'Hosted Agent')
        name: Installing wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: v0.12.1
      - name: Expose Artifact API and context information.
        uses: actions/github-script@v7
        with:
          script: "\n    core.exportVariable(\"ACTIONS_RUNTIME_TOKEN\", process.env[\"ACTIONS_RUNTIME_TOKEN\"])\n    core.exportVariable(\"ACTIONS_RUNTIME_URL\", process.env[\"ACTIONS_RUNTIME_URL\"])\n    core.exportVariable(\"GITHUB_RETENTION_DAYS\", process.env[\"GITHUB_RETENTION_DAYS\"])\n    console.log(context)\n    "
      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: recursive
      - name: Build Script Setup
        run: ./run --help || (git clean -ffdx && ./run --help)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: (always())
        name: Clean before
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: ./run ide upload --backend-source release --backend-release ${{env.ENSO_RELEASE_ID}} --sign-artifacts
        env:
          ENSO_IDE_AG_GRID_LICENSE_KEY: ${{ vars.ENSO_AG_GRID_LICENSE_KEY }}
          ENSO_IDE_API_URL: ${{ vars.ENSO_CLOUD_API_URL }}
          ENSO_IDE_AUTH_ENDPOINT: ${{ vars.ENSO_CLOUD_AUTH_ENDPOINT }}
          ENSO_IDE_CHAT_URL: ${{ vars.ENSO_CLOUD_CHAT_URL }}
          ENSO_IDE_COGNITO_DOMAIN: ${{ vars.ENSO_CLOUD_COGNITO_DOMAIN }}
          ENSO_IDE_COGNITO_REGION: ${{ vars.ENSO_CLOUD_COGNITO_REGION }}
          ENSO_IDE_COGNITO_USER_POOL_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_ID }}
          ENSO_IDE_COGNITO_USER_POOL_WEB_CLIENT_ID: ${{ vars.ENSO_CLOUD_COGNITO_USER_POOL_WEB_CLIENT_ID }}
          ENSO_IDE_ENVIRONMENT: ${{ vars.ENSO_CLOUD_ENVIRONMENT }}
          ENSO_IDE_GOOGLE_ANALYTICS_TAG: ${{ vars.ENSO_CLOUD_GOOGLE_ANALYTICS_TAG }}
          ENSO_IDE_MAPBOX_API_TOKEN: ${{ vars.ENSO_MAPBOX_API_TOKEN }}
          ENSO_IDE_SENTRY_DSN: ${{ vars.ENSO_CLOUD_SENTRY_DSN }}
          ENSO_IDE_SENTRY_ORGANIZATION: ${{ vars.ENSO_CLOUD_SENTRY_ORGANIZATION }}
          ENSO_IDE_SENTRY_PROJECT: ${{ vars.ENSO_CLOUD_SENTRY_PROJECT }}
          ENSO_IDE_STRIPE_KEY: ${{ vars.ENSO_CLOUD_STRIPE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.MICROSOFT_CODE_SIGNING_CERT_PASSWORD }}
          WIN_CSC_LINK: ${{ secrets.MICROSOFT_CODE_SIGNING_CERT }}
      - if: failure() && runner.os == 'Windows'
        name: List files if failed (Windows)
        run: Get-ChildItem -Force -Recurse
      - if: failure() && runner.os != 'Windows'
        name: List files if failed (non-Windows)
        run: ls -lAR
      - if: (always())
        name: Clean after
        run: ./run git-clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    env:
      ENSO_RELEASE_ID: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_RELEASE_ID }}
      ENSO_VERSION: ${{ needs.enso-build-ci-gen-draft-release-linux-amd64.outputs.ENSO_VERSION }}
env:
  ENSO_BUILD_SKIP_VERSION_CHECK: "true"
  ENSO_EDITION: ${{ inputs.version }}
  ENSO_VERSION: ${{ inputs.version }}
  RUST_BACKTRACE: full
